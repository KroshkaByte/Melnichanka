openapi: 3.0.3
info:
  title: Melnichanka API
  version: 1.0.0
  description: ' Melnichanka is a web application designed to generate a package of
    documents required for shipment'
paths:
  /api/v1/clients/:
    get:
      operationId: v1_clients_list
      description: |-
        API view for retrieving a list of clients and creating a new client record.

        Retrieves a list of clients with related director position, destination city,
        and railway station. Caches the client list for 15 minutes if not already cached.
      tags:
      - v1
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Client'
          description: ''
    post:
      operationId: v1_clients_create
      description: |-
        API view for retrieving a list of clients and creating a new client record.

        Retrieves a list of clients with related director position, destination city,
        and railway station. Caches the client list for 15 minutes if not already cached.
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Client'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Client'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Client'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Client'
          description: ''
  /api/v1/clients/{id}/:
    get:
      operationId: v1_clients_retrieve
      description: |-
        API view for updating a client record.

        Retrieves and updates a specific client record based on its primary key.
        Requires ClientAccessPermission for authorization.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - v1
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Client'
          description: ''
    put:
      operationId: v1_clients_update
      description: |-
        API view for updating a client record.

        Retrieves and updates a specific client record based on its primary key.
        Requires ClientAccessPermission for authorization.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Client'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Client'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Client'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Client'
          description: ''
    patch:
      operationId: v1_clients_partial_update
      description: |-
        API view for updating a client record.

        Retrieves and updates a specific client record based on its primary key.
        Requires ClientAccessPermission for authorization.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedClient'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedClient'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedClient'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Client'
          description: ''
  /api/v1/clients/delete/{id}/:
    delete:
      operationId: v1_clients_delete_destroy
      description: |-
        API view for deleting a client record.

        Deletes a specific client record based on its primary key.
        Requires ClientAccessPermission for authorization.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - v1
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/v1/clients/directorposition/:
    get:
      operationId: v1_clients_directorposition_list
      description: |-
        API view for retrieving a list of director positions.

        Retrieves a list of all available director positions.
        Requires authentication (IsAuthenticated).
      tags:
      - v1
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DirectorPosition'
          description: ''
  /api/v1/doc/data/:
    post:
      operationId: v1_doc_data_create
      description: Responsible for receiving data, validating it and storing it in
        cache.
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DataDoc'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/DataDoc'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/DataDoc'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataDoc'
          description: ''
  /api/v1/doc/downloadfile/:
    post:
      operationId: v1_doc_downloadfile_create
      description: |-
        To download a file:

        - No parameters: get the last created file.

        - With the parameter {"file_name": "name your file"} - load a specific file from the list.
      tags:
      - v1
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /api/v1/doc/filemake/:
    get:
      operationId: v1_doc_filemake_retrieve
      description: Responsible for creating documents based on data from the cache.
      tags:
      - v1
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /api/v1/goods/:
    get:
      operationId: v1_goods_list
      description: |-
        A viewset for managing CRUD operations for products.
        Retrieves a list of products with caching enabled for 30 minutes.
      tags:
      - v1
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Goods'
          description: ''
    post:
      operationId: v1_goods_create
      description: |-
        A viewset for managing CRUD operations for products.
        Retrieves a list of products with caching enabled for 30 minutes.
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Goods'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Goods'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Goods'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Goods'
          description: ''
  /api/v1/goods/{id}/:
    get:
      operationId: v1_goods_retrieve
      description: |-
        A viewset for managing CRUD operations for products.
        Retrieves a list of products with caching enabled for 30 minutes.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Товар.
        required: true
      tags:
      - v1
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Goods'
          description: ''
    put:
      operationId: v1_goods_update
      description: |-
        A viewset for managing CRUD operations for products.
        Retrieves a list of products with caching enabled for 30 minutes.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Товар.
        required: true
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Goods'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Goods'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Goods'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Goods'
          description: ''
    patch:
      operationId: v1_goods_partial_update
      description: |-
        A viewset for managing CRUD operations for products.
        Retrieves a list of products with caching enabled for 30 minutes.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Товар.
        required: true
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedGoods'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedGoods'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedGoods'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Goods'
          description: ''
    delete:
      operationId: v1_goods_destroy
      description: |-
        A viewset for managing CRUD operations for products.
        Retrieves a list of products with caching enabled for 30 minutes.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Товар.
        required: true
      tags:
      - v1
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/v1/logistics/auto/:
    get:
      operationId: v1_logistics_auto_list
      description: A viewset for handling CRUD operations on TripAuto objects.
      tags:
      - v1
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TripAuto'
          description: ''
    post:
      operationId: v1_logistics_auto_create
      description: A viewset for handling CRUD operations on TripAuto objects.
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TripAuto'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TripAuto'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TripAuto'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TripAuto'
          description: ''
  /api/v1/logistics/auto/{id}/:
    get:
      operationId: v1_logistics_auto_retrieve
      description: A viewset for handling CRUD operations on TripAuto objects.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Перевозки авто.
        required: true
      tags:
      - v1
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TripAuto'
          description: ''
    put:
      operationId: v1_logistics_auto_update
      description: A viewset for handling CRUD operations on TripAuto objects.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Перевозки авто.
        required: true
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TripAuto'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TripAuto'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TripAuto'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TripAuto'
          description: ''
    patch:
      operationId: v1_logistics_auto_partial_update
      description: A viewset for handling CRUD operations on TripAuto objects.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Перевозки авто.
        required: true
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedTripAuto'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedTripAuto'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedTripAuto'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TripAuto'
          description: ''
    delete:
      operationId: v1_logistics_auto_destroy
      description: A viewset for handling CRUD operations on TripAuto objects.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Перевозки авто.
        required: true
      tags:
      - v1
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/v1/logistics/city/:
    get:
      operationId: v1_logistics_city_list
      description: A viewset for handling CRUD operations on City objects.
      tags:
      - v1
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/City'
          description: ''
    post:
      operationId: v1_logistics_city_create
      description: A viewset for handling CRUD operations on City objects.
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/City'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/City'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/City'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/City'
          description: ''
  /api/v1/logistics/city/{id}/:
    get:
      operationId: v1_logistics_city_retrieve
      description: A viewset for handling CRUD operations on City objects.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Населенный пункт.
        required: true
      tags:
      - v1
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/City'
          description: ''
    put:
      operationId: v1_logistics_city_update
      description: A viewset for handling CRUD operations on City objects.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Населенный пункт.
        required: true
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/City'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/City'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/City'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/City'
          description: ''
    patch:
      operationId: v1_logistics_city_partial_update
      description: A viewset for handling CRUD operations on City objects.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Населенный пункт.
        required: true
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedCity'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedCity'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedCity'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/City'
          description: ''
    delete:
      operationId: v1_logistics_city_destroy
      description: A viewset for handling CRUD operations on City objects.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Населенный пункт.
        required: true
      tags:
      - v1
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/v1/logistics/factories/:
    get:
      operationId: v1_logistics_factories_list
      description: A view for listing factories, with caching implemented.
      tags:
      - v1
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Factory'
          description: ''
  /api/v1/logistics/rw/:
    get:
      operationId: v1_logistics_rw_list
      description: A viewset for handling CRUD operations on TripRailway objects.
      tags:
      - v1
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TripRailway'
          description: ''
    post:
      operationId: v1_logistics_rw_create
      description: A viewset for handling CRUD operations on TripRailway objects.
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TripRailway'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TripRailway'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TripRailway'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TripRailway'
          description: ''
  /api/v1/logistics/rw/{id}/:
    get:
      operationId: v1_logistics_rw_retrieve
      description: A viewset for handling CRUD operations on TripRailway objects.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Перевозки ж/д.
        required: true
      tags:
      - v1
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TripRailway'
          description: ''
    put:
      operationId: v1_logistics_rw_update
      description: A viewset for handling CRUD operations on TripRailway objects.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Перевозки ж/д.
        required: true
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TripRailway'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TripRailway'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TripRailway'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TripRailway'
          description: ''
    patch:
      operationId: v1_logistics_rw_partial_update
      description: A viewset for handling CRUD operations on TripRailway objects.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Перевозки ж/д.
        required: true
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedTripRailway'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedTripRailway'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedTripRailway'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TripRailway'
          description: ''
    delete:
      operationId: v1_logistics_rw_destroy
      description: A viewset for handling CRUD operations on TripRailway objects.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Перевозки ж/д.
        required: true
      tags:
      - v1
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/v1/logistics/stations/:
    get:
      operationId: v1_logistics_stations_list
      description: A viewset for handling CRUD operations on RailwayStation objects.
      tags:
      - v1
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RailwayStation'
          description: ''
    post:
      operationId: v1_logistics_stations_create
      description: A viewset for handling CRUD operations on RailwayStation objects.
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RailwayStation'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/RailwayStation'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/RailwayStation'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RailwayStation'
          description: ''
  /api/v1/logistics/stations/{id}/:
    get:
      operationId: v1_logistics_stations_retrieve
      description: A viewset for handling CRUD operations on RailwayStation objects.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Ж/д станция.
        required: true
      tags:
      - v1
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RailwayStation'
          description: ''
    put:
      operationId: v1_logistics_stations_update
      description: A viewset for handling CRUD operations on RailwayStation objects.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Ж/д станция.
        required: true
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RailwayStation'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/RailwayStation'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/RailwayStation'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RailwayStation'
          description: ''
    patch:
      operationId: v1_logistics_stations_partial_update
      description: A viewset for handling CRUD operations on RailwayStation objects.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Ж/д станция.
        required: true
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedRailwayStation'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedRailwayStation'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedRailwayStation'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RailwayStation'
          description: ''
    delete:
      operationId: v1_logistics_stations_destroy
      description: A viewset for handling CRUD operations on RailwayStation objects.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Ж/д станция.
        required: true
      tags:
      - v1
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/v1/users/departments/:
    get:
      operationId: v1_users_departments_list
      description: View to list departments.
      tags:
      - v1
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Department'
          description: ''
  /api/v1/users/edit/:
    get:
      operationId: v1_users_edit_retrieve
      description: View to handle updating user data.
      tags:
      - v1
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserUpdate'
          description: ''
    put:
      operationId: v1_users_edit_update
      description: View to handle updating user data.
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserUpdate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserUpdate'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserUpdate'
          description: ''
    patch:
      operationId: v1_users_edit_partial_update
      description: View to handle updating user data.
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUserUpdate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedUserUpdate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUserUpdate'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserUpdate'
          description: ''
  /api/v1/users/edit_password/:
    get:
      operationId: v1_users_edit_password_retrieve
      description: View to handle changing user password.
      tags:
      - v1
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserUpdatePassword'
          description: ''
    put:
      operationId: v1_users_edit_password_update
      description: View to handle changing user password.
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdatePassword'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserUpdatePassword'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserUpdatePassword'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserUpdatePassword'
          description: ''
    patch:
      operationId: v1_users_edit_password_partial_update
      description: View to handle changing user password.
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUserUpdatePassword'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedUserUpdatePassword'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUserUpdatePassword'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserUpdatePassword'
          description: ''
  /api/v1/users/list_user_files/:
    get:
      operationId: v1_users_list_user_files_retrieve
      description: |-
        Handle GET requests to list user's files.

        Returns:
            - List of user's files or error message.
      tags:
      - v1
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /api/v1/users/login/:
    post:
      operationId: v1_users_login_create
      description: |-
        Handle POST requests to obtain JWT.

        Params:
            - email: User's email address.
            - password: User's password.

        Returns:
            - JSON response with JWT or error message.
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenObtainPair'
          description: ''
  /api/v1/users/logout/:
    post:
      operationId: v1_users_logout_create
      description: |-
        Handle POST requests to logout user.

        Params:
            - refresh_token: JWT refresh token.

        Returns:
            - HTTP 205 Reset Content on success, or HTTP 400 Bad Request on failure.
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Logout'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Logout'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Logout'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Logout'
          description: ''
  /api/v1/users/password_reset/:
    post:
      operationId: v1_users_password_reset_create
      description: |-
        An Api View which provides a method to request a password reset token based on an e-mail address

        Sends a signal reset_password_token_created when a reset token was created
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Email'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Email'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Email'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Email'
          description: ''
  /api/v1/users/password_reset/confirm/:
    post:
      operationId: v1_users_password_reset_confirm_create
      description: An Api View which provides a method to reset a password based on
        a unique token
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordToken'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PasswordToken'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PasswordToken'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PasswordToken'
          description: ''
  /api/v1/users/password_reset/validate_token/:
    post:
      operationId: v1_users_password_reset_validate_token_create
      description: An Api View which provides a method to verify that a token is valid
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResetToken'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ResetToken'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ResetToken'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResetToken'
          description: ''
  /api/v1/users/positions/:
    get:
      operationId: v1_users_positions_list
      description: View to list positions.
      tags:
      - v1
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Position'
          description: ''
  /api/v1/users/registration/:
    post:
      operationId: v1_users_registration_create
      description: View to handle user registration.
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomUser'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CustomUser'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CustomUser'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomUser'
          description: ''
  /api/v1/users/token/refresh/:
    post:
      operationId: v1_users_token_refresh_create
      description: |-
        Takes a refresh type JSON web token and returns an access type JSON web
        token if the refresh token is valid.
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenRefresh'
          description: ''
components:
  schemas:
    City:
      type: object
      description: |-
        Serializer for City model.

        Serializes all fields of the City model.
      properties:
        id:
          type: integer
          readOnly: true
        city:
          type: string
          title: Населенный пункт
          maxLength: 100
        region:
          type: string
          title: Регион
          maxLength: 100
      required:
      - city
      - id
      - region
    Client:
      type: object
      description: |-
        Serializer for the Client model.

        Serializes all fields of the Client model
        including nested serialization of 'director_position'.
        Adds 'destination_city' and 'railway_station' as CharField serializers.
        Sets the current authenticated user as the value for the 'user' field using HiddenField.

        Fields:
        - id: IntegerField
        - director_position: Nested serialization using DirectorPositionSerializer
        - destination_city: CharField for destination city name
        - railway_station: CharField for railway station name
        - user: HiddenField that defaults to the current authenticated user

        Note: 'user' field is automatically populated with the current user making the request.
      properties:
        id:
          type: integer
          readOnly: true
        director_position:
          $ref: '#/components/schemas/DirectorPosition'
        destination_city:
          type: string
        railway_station:
          type: string
        client_name:
          type: string
          title: Наименование организации
          maxLength: 100
        contract_number:
          type: string
          title: Номер договора
          maxLength: 50
        contract_date:
          type: string
          format: date
          title: Дата заключения договора
        director_name:
          type: string
          title: ФИО директора
          maxLength: 100
        receiver_name:
          type: string
          title: Имя получателя
          maxLength: 100
        receiver_id:
          type: integer
          maximum: 2147483647
          minimum: 0
          nullable: true
          title: Номер получателя
        receiver_okpo:
          type: integer
          maximum: 2147483647
          minimum: 0
          nullable: true
          title: ОКПО
        receiver_adress:
          type: string
          title: Адрес получателя
          maxLength: 200
        special_marks:
          type: string
          title: Особые отметки
          maxLength: 200
        last_application_number:
          type: string
          title: Номер приложения
          maxLength: 50
      required:
      - client_name
      - contract_date
      - contract_number
      - destination_city
      - director_name
      - director_position
      - id
      - railway_station
    CustomUser:
      type: object
      description: Serializer for creating a new user record.
      properties:
        id:
          type: integer
          readOnly: true
        email:
          type: string
          format: email
          title: E-mail
          maxLength: 50
        full_name:
          type: string
          title: ФИО
          maxLength: 75
        position:
          type: integer
          nullable: true
          title: Позиция
        department:
          type: integer
          nullable: true
          title: Департамент
        phone_number_work:
          type: string
          title: Рабочий телефон
          maxLength: 128
        phone_number_personal:
          type: string
          title: Личный телефон
          maxLength: 128
        password:
          type: string
          writeOnly: true
        password_confirm:
          type: string
          writeOnly: true
      required:
      - email
      - full_name
      - id
      - password
      - password_confirm
      - phone_number_personal
      - phone_number_work
    DataDoc:
      type: object
      description: A serializer for document data.
      properties:
        delivery_type:
          type: string
        client_id:
          type: integer
        items:
          type: array
          items:
            $ref: '#/components/schemas/OrderItem'
        factory_id:
          type: integer
        destination:
          type: string
        delivery_cost:
          type: integer
          minimum: 0
      required:
      - client_id
      - delivery_cost
      - delivery_type
      - destination
      - factory_id
      - items
    Department:
      type: object
      description: Serializer for Department model.
      properties:
        id:
          type: integer
          readOnly: true
        department:
          type: string
          title: Название департамента
          maxLength: 50
      required:
      - department
      - id
    DepartureStationBranchEnum:
      enum:
      - ОЖД
      - КаЖД
      - МЖД
      - ГЖД
      - СеЖД
      - СКЖД
      - ЮВЖД
      - ПЖД
      - КуЖД
      - СвЖД
      - ЮУЖД
      - ЗСЖД
      - КЖД
      - ВСЖД
      - ЗЖД
      - ДВЖД
      type: string
      description: |-
        * `ОЖД` - Октябрьская ж/д
        * `КаЖД` - Калининградская ж/д
        * `МЖД` - Московская ж/д
        * `ГЖД` - Горьковская ж/д
        * `СеЖД` - Северная ж/д
        * `СКЖД` - Северо-Кавказская ж/д
        * `ЮВЖД` - Юго-Восточная ж/д
        * `ПЖД` - Приволжская ж/д
        * `КуЖД` - Куйбышевская ж/д
        * `СвЖД` - Свердловская ж/д
        * `ЮУЖД` - Южно-Уральская ж/д
        * `ЗСЖД` - Западно-Сибирская ж/д
        * `КЖД` - Красноярская ж/д
        * `ВСЖД` - Восточно-Сибирская ж/д
        * `ЗЖД` - Забайкальская ж/д
        * `ДВЖД` - Дальневосточная ж/д
    DirectorPosition:
      type: object
      description: |-
        Serializer for the DirectorPosition model.

        Serializes the 'id' and 'director_position' fields of DirectorPosition.
      properties:
        id:
          type: integer
          readOnly: true
        director_position:
          type: string
          title: Должность директора
          maxLength: 40
      required:
      - director_position
      - id
    Email:
      type: object
      properties:
        email:
          type: string
          format: email
      required:
      - email
    Factory:
      type: object
      description: Serializer for Factory model.
      properties:
        id:
          type: integer
          readOnly: true
        full_name:
          type: string
          title: Полное название предприятия
          maxLength: 100
        short_name:
          type: string
          title: Краткое название предприятия
          maxLength: 100
        full_address:
          type: string
          title: Адрес предприятия
          maxLength: 100
        departure_city:
          type: string
          title: Город отправления
          maxLength: 100
        departure_station_branch:
          allOf:
          - $ref: '#/components/schemas/DepartureStationBranchEnum'
          title: Ветка ж/д стации
        departure_station_id:
          type: integer
          maximum: 2147483647
          minimum: 0
          title: Код ж/д стации
        departure_station_name:
          type: string
          title: Ж/Д станция
          maxLength: 100
      required:
      - departure_city
      - departure_station_branch
      - departure_station_id
      - departure_station_name
      - full_address
      - full_name
      - id
      - short_name
    Goods:
      type: object
      description: Serializer for serializing/deserializing Product objects.
      properties:
        id:
          type: integer
          readOnly: true
        flour_name:
          type: string
        brand:
          type: string
        package:
          type: string
        price:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          title: Цена, руб./тн
      required:
      - brand
      - flour_name
      - id
      - package
      - price
    Logout:
      type: object
      description: Serializer for logging out a user.
      properties:
        refresh_token:
          type: string
      required:
      - refresh_token
    OrderItem:
      type: object
      description: A serializer for order items.
      properties:
        product_id:
          type: integer
        quantity:
          type: number
          format: double
          minimum: 0.001
        discount:
          type: integer
          maximum: 100
          default: 0
      required:
      - product_id
      - quantity
    PasswordToken:
      type: object
      properties:
        password:
          type: string
          title: Пароль
        token:
          type: string
      required:
      - password
      - token
    PatchedCity:
      type: object
      description: |-
        Serializer for City model.

        Serializes all fields of the City model.
      properties:
        id:
          type: integer
          readOnly: true
        city:
          type: string
          title: Населенный пункт
          maxLength: 100
        region:
          type: string
          title: Регион
          maxLength: 100
    PatchedClient:
      type: object
      description: |-
        Serializer for the Client model.

        Serializes all fields of the Client model
        including nested serialization of 'director_position'.
        Adds 'destination_city' and 'railway_station' as CharField serializers.
        Sets the current authenticated user as the value for the 'user' field using HiddenField.

        Fields:
        - id: IntegerField
        - director_position: Nested serialization using DirectorPositionSerializer
        - destination_city: CharField for destination city name
        - railway_station: CharField for railway station name
        - user: HiddenField that defaults to the current authenticated user

        Note: 'user' field is automatically populated with the current user making the request.
      properties:
        id:
          type: integer
          readOnly: true
        director_position:
          $ref: '#/components/schemas/DirectorPosition'
        destination_city:
          type: string
        railway_station:
          type: string
        client_name:
          type: string
          title: Наименование организации
          maxLength: 100
        contract_number:
          type: string
          title: Номер договора
          maxLength: 50
        contract_date:
          type: string
          format: date
          title: Дата заключения договора
        director_name:
          type: string
          title: ФИО директора
          maxLength: 100
        receiver_name:
          type: string
          title: Имя получателя
          maxLength: 100
        receiver_id:
          type: integer
          maximum: 2147483647
          minimum: 0
          nullable: true
          title: Номер получателя
        receiver_okpo:
          type: integer
          maximum: 2147483647
          minimum: 0
          nullable: true
          title: ОКПО
        receiver_adress:
          type: string
          title: Адрес получателя
          maxLength: 200
        special_marks:
          type: string
          title: Особые отметки
          maxLength: 200
        last_application_number:
          type: string
          title: Номер приложения
          maxLength: 50
    PatchedGoods:
      type: object
      description: Serializer for serializing/deserializing Product objects.
      properties:
        id:
          type: integer
          readOnly: true
        flour_name:
          type: string
        brand:
          type: string
        package:
          type: string
        price:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          title: Цена, руб./тн
    PatchedRailwayStation:
      type: object
      description: Serializer for RailwayStation model.
      properties:
        id:
          type: integer
          readOnly: true
        station_name:
          type: string
          title: Станция
          maxLength: 100
        station_id:
          type: integer
          maximum: 2147483647
          minimum: 0
        station_branch:
          $ref: '#/components/schemas/StationBranchEnum'
    PatchedTripAuto:
      type: object
      description: |-
        Serializer for TripAuto model.

        Serializes all fields of the TripAuto model, and includes
        additional fields for departure_city and destination_city.
      properties:
        id:
          type: integer
          readOnly: true
        departure_city:
          type: string
        destination_city:
          type: string
        cost_per_tonn_auto:
          type: integer
          maximum: 2147483647
          minimum: 0
          title: Цена за рейс, руб./тн
    PatchedTripRailway:
      type: object
      description: Serializer for TripRailway model.
      properties:
        id:
          type: integer
          readOnly: true
        departure_station_name:
          type: string
        destination_station_name:
          type: string
        cost_per_tonn_rw:
          type: integer
          maximum: 2147483647
          minimum: 0
    PatchedUserUpdate:
      type: object
      description: Serializer for updating existing user records.
      properties:
        id:
          type: integer
          readOnly: true
        email:
          type: string
          format: email
          title: E-mail
          maxLength: 50
        full_name:
          type: string
          title: ФИО
          maxLength: 75
        position:
          type: integer
          nullable: true
          title: Позиция
        department:
          type: integer
          nullable: true
          title: Департамент
        phone_number_work:
          type: string
          title: Рабочий телефон
          maxLength: 128
        phone_number_personal:
          type: string
          title: Личный телефон
          maxLength: 128
    PatchedUserUpdatePassword:
      type: object
      description: Serializer for updating user password.
      properties:
        old_password:
          type: string
          writeOnly: true
        new_password:
          type: string
          writeOnly: true
        new_password_confirm:
          type: string
          writeOnly: true
    Position:
      type: object
      description: Serializer for Position model.
      properties:
        id:
          type: integer
          readOnly: true
        position:
          type: string
          title: Название позиции
          maxLength: 30
      required:
      - id
      - position
    RailwayStation:
      type: object
      description: Serializer for RailwayStation model.
      properties:
        id:
          type: integer
          readOnly: true
        station_name:
          type: string
          title: Станция
          maxLength: 100
        station_id:
          type: integer
          maximum: 2147483647
          minimum: 0
        station_branch:
          $ref: '#/components/schemas/StationBranchEnum'
      required:
      - id
      - station_branch
      - station_id
      - station_name
    ResetToken:
      type: object
      properties:
        token:
          type: string
      required:
      - token
    StationBranchEnum:
      enum:
      - ОЖД
      - КаЖД
      - МЖД
      - ГЖД
      - СеЖД
      - СКЖД
      - ЮВЖД
      - ПЖД
      - КуЖД
      - СвЖД
      - ЮУЖД
      - ЗСЖД
      - КЖД
      - ВСЖД
      - ЗЖД
      - ДВЖД
      type: string
      description: |-
        * `ОЖД` - Октябрьская ж/д
        * `КаЖД` - Калининградская ж/д
        * `МЖД` - Московская ж/д
        * `ГЖД` - Горьковская ж/д
        * `СеЖД` - Северная ж/д
        * `СКЖД` - Северо-Кавказская ж/д
        * `ЮВЖД` - Юго-Восточная ж/д
        * `ПЖД` - Приволжская ж/д
        * `КуЖД` - Куйбышевская ж/д
        * `СвЖД` - Свердловская ж/д
        * `ЮУЖД` - Южно-Уральская ж/д
        * `ЗСЖД` - Западно-Сибирская ж/д
        * `КЖД` - Красноярская ж/д
        * `ВСЖД` - Восточно-Сибирская ж/д
        * `ЗЖД` - Забайкальская ж/д
        * `ДВЖД` - Дальневосточная ж/д
    TokenObtainPair:
      type: object
      properties:
        email:
          type: string
          writeOnly: true
        password:
          type: string
          writeOnly: true
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          readOnly: true
      required:
      - access
      - email
      - password
      - refresh
    TokenRefresh:
      type: object
      properties:
        access:
          type: string
          readOnly: true
        refresh:
          type: string
      required:
      - access
      - refresh
    TripAuto:
      type: object
      description: |-
        Serializer for TripAuto model.

        Serializes all fields of the TripAuto model, and includes
        additional fields for departure_city and destination_city.
      properties:
        id:
          type: integer
          readOnly: true
        departure_city:
          type: string
        destination_city:
          type: string
        cost_per_tonn_auto:
          type: integer
          maximum: 2147483647
          minimum: 0
          title: Цена за рейс, руб./тн
      required:
      - cost_per_tonn_auto
      - departure_city
      - destination_city
      - id
    TripRailway:
      type: object
      description: Serializer for TripRailway model.
      properties:
        id:
          type: integer
          readOnly: true
        departure_station_name:
          type: string
        destination_station_name:
          type: string
        cost_per_tonn_rw:
          type: integer
          maximum: 2147483647
          minimum: 0
      required:
      - cost_per_tonn_rw
      - departure_station_name
      - destination_station_name
      - id
    UserUpdate:
      type: object
      description: Serializer for updating existing user records.
      properties:
        id:
          type: integer
          readOnly: true
        email:
          type: string
          format: email
          title: E-mail
          maxLength: 50
        full_name:
          type: string
          title: ФИО
          maxLength: 75
        position:
          type: integer
          nullable: true
          title: Позиция
        department:
          type: integer
          nullable: true
          title: Департамент
        phone_number_work:
          type: string
          title: Рабочий телефон
          maxLength: 128
        phone_number_personal:
          type: string
          title: Личный телефон
          maxLength: 128
      required:
      - email
      - full_name
      - id
      - phone_number_personal
      - phone_number_work
    UserUpdatePassword:
      type: object
      description: Serializer for updating user password.
      properties:
        old_password:
          type: string
          writeOnly: true
        new_password:
          type: string
          writeOnly: true
        new_password_confirm:
          type: string
          writeOnly: true
      required:
      - new_password
      - new_password_confirm
      - old_password
  securitySchemes:
    jwtAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
